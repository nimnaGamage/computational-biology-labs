#Take home Assignment – Individual
# Gene expression data analysis
# Author: Nimna A. G. T.
# Date: 14/2/2024

# Set working directory
setwd("D:/4th_yr_sem2/CS4115 Computational Biology/TH-Gene Expression data analysis/Rcode_THA")

# Get working directory
getwd()


# Get data from airway package (run getData.R)

# Install the necessary packages
# BiocManager::install("airway")

# Load the packages into the R session
library(airway)

data(airway)
airway

sample_info <- as.data.frame(colData(airway))
sample_info <- sample_info[,c(2,3)]
sample_info$dex <- gsub('trt', 'treated', sample_info$dex)
sample_info$dex <- gsub('untrt', 'untreated', sample_info$dex)
names(sample_info) <- c('cellLine', 'dexamethasone')
write.table(sample_info, file = "sample_info.csv", sep = ',', col.names = T, row.names = T, quote = F)
sample_info

countsData <- assay(airway)
write.table(countsData, file = "counts_data.csv", sep = ',', col.names = T, row.names = T, quote = F)
#countsData
head(countsData)

#Q1. Describe the data

# Read the csv files generated above

# Sample information
sample_info_csv <- read.csv("sample_info.csv", header = TRUE, stringsAsFactors = FALSE)
sample_info_csv

# Counts data
countsData_csv <- read.csv("counts_data.csv", header = TRUE, row.names = 1)
head(countsData_csv)

##1
# Summary statistics of the data

# Summary of sample information
summary(sample_info_csv)

# Summary of counts data
summary(countsData_csv)


##2
# Bar plot - The distribution of treated vs. untreated samples

# Install the necessary packages
# install.packages("ggplot2")

# Load the packages into the R session
library(ggplot2)

ggplot(sample_info_csv, aes(x = dexamethasone, fill = dexamethasone)) +
  geom_bar() +
  labs(title = "The Distribution of Treated vs. Untreated Samples")




#Q2. Use DESeq2 package in R to identify a list of differentially expressed genes

# Install the necessary packages
# BiocManager::install("DESeq2")

# Load the packages into the R session
library(DESeq2)

# Ensure that the column names in countData matches the rownames in colData
all(colnames(countsData_csv) %in% rownames(sample_info_csv))

# Ensure that the above data is in same order
all(colnames(countsData_csv) == rownames(sample_info_csv))

# Create DESeqDataSet object from the count data 
# Use 'dexamethasone' as the design factor
dds <- DESeqDataSetFromMatrix(countData = countsData_csv,
                              colData = sample_info_csv,
                              design = ~ dexamethasone)
dds

# prefiltering on DESeqDataSet object
# Remove rows with low gene counts 
# Keeping rows with at least 10 reades total
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]

dds

# Set the factor level
# Reference level - untreated
# Compare untreated with other levels
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")

# Differential expression analysis using 'DESeq()' function
dds <- DESeq(dds)


# Extract differential expression results
res = results(dds)


# Explore Results
summary(res)

# optional-Changing the alpha value
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)

# lists the coefficients
resultsNames(dds)

# Filter significantly differentially expressed genes 
# Adjust p-value threshold = 0.05
DE_genes = subset(res, padj < 0.05 & abs(log2FoldChange) > 1)


# Get the differentially expressed genes
head(DE_genes)

tail(DE_genes)

print(DE_genes)

#Write differentially expressed genes into a csv file
write.table(DE_genes, file = "s14682_De_genes.csv", sep = ',')

## Above list of differentially expressed genes are retrieved based on the comparison 
## between treated and untreated samples using DESeq2 package in R.
## The significance threshold (padj < 0.05) can be adjusted based on the specific analysis requirements.

# Visualize the data - MA plot
# Plots the log-fold-change between experimental groups against the mean expression across all the samples for each gene.
plotMA(res)


#Q3. Identify the subgroups of differentially expressed genes by hierarchical clustering. – get the 
#Clustering image, Members of each group

### Hierarchical clustering on differentially expressed genes

# Standardize/normalize the data
DE_genes = scale(DE_genes)

# Gete the transpose
# DE_genes = t(DE_genes)

# Obtain the distance matrix
dist_matrix_genes = dist(DE_genes)

# Using of 'hclust()' function
hc_genes = hclust(dist_matrix_genes, method = "ward.D")

# Visualize the Dendogram using the 'plot()' function 
plot(hc_genes, main = "Dendrogram of Hierarchical Clustering")


# Extract cluster assignments using 'cutree()' function
# Specified desired no. of clusters(e. g. k = 2; treated, untreated)
cluster_assignments_genes = cutree(hc_genes, k = 2)  

# devide the 2 clusters using 2 rectangles for the visualization
rect.hclust(hc_genes,k=2,border = "red")


# Extract members of each gene cluster
group_members <- lapply(unique(cluster_assignments_genes), function(group) {
  genes_in_group <- rownames(gene_expr_genes)[cluster_assignments_genes == group]
  return(genes_in_group)
})

# Display members of each group
print("Member genes of each group:")
for (i in seq_along(group_members)) {
  cat("Group", i, ": ", paste(group_members[[i]], collapse = ", "), "\n")
}

